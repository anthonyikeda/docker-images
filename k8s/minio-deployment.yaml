apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-config
data:
  minio-config: |
    {
      "version": "22",
      "credential": {
        "accessKey": "USER123456",
        "secretKey": "PASS123456"
      },
      "region" : "us-east-1",
      "browser": "on",
      "domain": "",
      "storageclass": {
        "standard": "",
        "rrs": ""
      },
      "notify" : {
        "amqp" : {
          "1" : {
            "enable" : true,
            "url" : "amqp://USER123456:PASS123456@rabbitmq-service:5672",
            "exchange" : "bucketevents",
            "routingkey" : "bucketlogs",
            "exchangeType" : "fanout",
            "deliveryMode" : 0,
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        }
      }
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # This name uniquely identifies the PVC. Will be used in deployment below.
  name: minio-pv-claim
  labels:
    app: minio-storage-claim
spec:
  # Read more about access modes here: http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes
  accessModes:
    - ReadWriteOnce
  resources:
    # This is the request for storage. Should be available in the cluster.
    requests:
      storage: 10Gi
  # Uncomment and add storageClass specific to your requirements below. Read more https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
  #storageClassName:
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio-deployment
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        # Label is used as selector in the service.
        app: minio
    spec:
      # Refer to the PVC created earlier
      volumes:
      - name: storage
        persistentVolumeClaim:
          # Name of the PVC created earlier
          claimName: minio-pv-claim
      - name: config
        configMap:
          name: minio-config
          items:
          - key: minio-config
            path: config.json
      containers:
      - name: minio
        # Pulls the default Minio image from Docker Hub
        image: minio/minio
        args:
        - server
        - /storage
        - "--config-dir"
        - "/etc/minio"
        ports:
        - containerPort: 9000
          # This ensures containers are allocated on separate hosts. Remove hostPort to allow multiple Minio containers on one host
          hostPort: 9000
        # Mount the volume into the pod
        volumeMounts:
        - name: storage # must match the volume name, above
          mountPath: "/storage"
        - name: config
          mountPath: "/etc/minio"
---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
spec:
  type: LoadBalancer
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    app: minio
